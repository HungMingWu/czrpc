// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message.proto

#ifndef PROTOBUF_proto_5fmessage_2eproto__INCLUDED
#define PROTOBUF_proto_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fmessage_2eproto();
void protobuf_AssignDesc_proto_5fmessage_2eproto();
void protobuf_ShutdownFile_proto_5fmessage_2eproto();

class request_person_info_message;
class response_person_info_message;
class auto_weather_message;
class response_error;

// ===================================================================

class request_person_info_message : public ::google::protobuf::Message {
 public:
  request_person_info_message();
  virtual ~request_person_info_message();

  request_person_info_message(const request_person_info_message& from);

  inline request_person_info_message& operator=(const request_person_info_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request_person_info_message& default_instance();

  void Swap(request_person_info_message* other);

  // implements Message ----------------------------------------------

  request_person_info_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request_person_info_message& from);
  void MergeFrom(const request_person_info_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:request_person_info_message)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fmessage_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static request_person_info_message* default_instance_;
};
// -------------------------------------------------------------------

class response_person_info_message : public ::google::protobuf::Message {
 public:
  response_person_info_message();
  virtual ~response_person_info_message();

  response_person_info_message(const response_person_info_message& from);

  inline response_person_info_message& operator=(const response_person_info_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const response_person_info_message& default_instance();

  void Swap(response_person_info_message* other);

  // implements Message ----------------------------------------------

  response_person_info_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const response_person_info_message& from);
  void MergeFrom(const response_person_info_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:response_person_info_message)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fmessage_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static response_person_info_message* default_instance_;
};
// -------------------------------------------------------------------

class auto_weather_message : public ::google::protobuf::Message {
 public:
  auto_weather_message();
  virtual ~auto_weather_message();

  auto_weather_message(const auto_weather_message& from);

  inline auto_weather_message& operator=(const auto_weather_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_weather_message& default_instance();

  void Swap(auto_weather_message* other);

  // implements Message ----------------------------------------------

  auto_weather_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_weather_message& from);
  void MergeFrom(const auto_weather_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string city_name = 1;
  inline bool has_city_name() const;
  inline void clear_city_name();
  static const int kCityNameFieldNumber = 1;
  inline const ::std::string& city_name() const;
  inline void set_city_name(const ::std::string& value);
  inline void set_city_name(const char* value);
  inline void set_city_name(const char* value, size_t size);
  inline ::std::string* mutable_city_name();
  inline ::std::string* release_city_name();
  inline void set_allocated_city_name(::std::string* city_name);

  // optional string weather = 2;
  inline bool has_weather() const;
  inline void clear_weather();
  static const int kWeatherFieldNumber = 2;
  inline const ::std::string& weather() const;
  inline void set_weather(const ::std::string& value);
  inline void set_weather(const char* value);
  inline void set_weather(const char* value, size_t size);
  inline ::std::string* mutable_weather();
  inline ::std::string* release_weather();
  inline void set_allocated_weather(::std::string* weather);

  // @@protoc_insertion_point(class_scope:auto_weather_message)
 private:
  inline void set_has_city_name();
  inline void clear_has_city_name();
  inline void set_has_weather();
  inline void clear_has_weather();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* city_name_;
  ::std::string* weather_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fmessage_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static auto_weather_message* default_instance_;
};
// -------------------------------------------------------------------

class response_error : public ::google::protobuf::Message {
 public:
  response_error();
  virtual ~response_error();

  response_error(const response_error& from);

  inline response_error& operator=(const response_error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const response_error& default_instance();

  void Swap(response_error* other);

  // implements Message ----------------------------------------------

  response_error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const response_error& from);
  void MergeFrom(const response_error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional string error_string = 2;
  inline bool has_error_string() const;
  inline void clear_error_string();
  static const int kErrorStringFieldNumber = 2;
  inline const ::std::string& error_string() const;
  inline void set_error_string(const ::std::string& value);
  inline void set_error_string(const char* value);
  inline void set_error_string(const char* value, size_t size);
  inline ::std::string* mutable_error_string();
  inline ::std::string* release_error_string();
  inline void set_allocated_error_string(::std::string* error_string);

  // @@protoc_insertion_point(class_scope:response_error)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error_string();
  inline void clear_has_error_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_string_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fmessage_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static response_error* default_instance_;
};
// ===================================================================


// ===================================================================

// request_person_info_message

// optional string name = 1;
inline bool request_person_info_message::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_person_info_message::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request_person_info_message::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request_person_info_message::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& request_person_info_message::name() const {
  return *name_;
}
inline void request_person_info_message::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void request_person_info_message::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void request_person_info_message::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request_person_info_message::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* request_person_info_message::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void request_person_info_message::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 age = 2;
inline bool request_person_info_message::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void request_person_info_message::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void request_person_info_message::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void request_person_info_message::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 request_person_info_message::age() const {
  return age_;
}
inline void request_person_info_message::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// -------------------------------------------------------------------

// response_person_info_message

// optional string name = 1;
inline bool response_person_info_message::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void response_person_info_message::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void response_person_info_message::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void response_person_info_message::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& response_person_info_message::name() const {
  return *name_;
}
inline void response_person_info_message::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void response_person_info_message::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void response_person_info_message::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* response_person_info_message::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* response_person_info_message::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void response_person_info_message::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 age = 2;
inline bool response_person_info_message::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void response_person_info_message::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void response_person_info_message::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void response_person_info_message::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 response_person_info_message::age() const {
  return age_;
}
inline void response_person_info_message::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// -------------------------------------------------------------------

// auto_weather_message

// optional string city_name = 1;
inline bool auto_weather_message::has_city_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auto_weather_message::set_has_city_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auto_weather_message::clear_has_city_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auto_weather_message::clear_city_name() {
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    city_name_->clear();
  }
  clear_has_city_name();
}
inline const ::std::string& auto_weather_message::city_name() const {
  return *city_name_;
}
inline void auto_weather_message::set_city_name(const ::std::string& value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
}
inline void auto_weather_message::set_city_name(const char* value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
}
inline void auto_weather_message::set_city_name(const char* value, size_t size) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auto_weather_message::mutable_city_name() {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  return city_name_;
}
inline ::std::string* auto_weather_message::release_city_name() {
  clear_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_name_;
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auto_weather_message::set_allocated_city_name(::std::string* city_name) {
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    delete city_name_;
  }
  if (city_name) {
    set_has_city_name();
    city_name_ = city_name;
  } else {
    clear_has_city_name();
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weather = 2;
inline bool auto_weather_message::has_weather() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_weather_message::set_has_weather() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_weather_message::clear_has_weather() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_weather_message::clear_weather() {
  if (weather_ != &::google::protobuf::internal::kEmptyString) {
    weather_->clear();
  }
  clear_has_weather();
}
inline const ::std::string& auto_weather_message::weather() const {
  return *weather_;
}
inline void auto_weather_message::set_weather(const ::std::string& value) {
  set_has_weather();
  if (weather_ == &::google::protobuf::internal::kEmptyString) {
    weather_ = new ::std::string;
  }
  weather_->assign(value);
}
inline void auto_weather_message::set_weather(const char* value) {
  set_has_weather();
  if (weather_ == &::google::protobuf::internal::kEmptyString) {
    weather_ = new ::std::string;
  }
  weather_->assign(value);
}
inline void auto_weather_message::set_weather(const char* value, size_t size) {
  set_has_weather();
  if (weather_ == &::google::protobuf::internal::kEmptyString) {
    weather_ = new ::std::string;
  }
  weather_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auto_weather_message::mutable_weather() {
  set_has_weather();
  if (weather_ == &::google::protobuf::internal::kEmptyString) {
    weather_ = new ::std::string;
  }
  return weather_;
}
inline ::std::string* auto_weather_message::release_weather() {
  clear_has_weather();
  if (weather_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weather_;
    weather_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auto_weather_message::set_allocated_weather(::std::string* weather) {
  if (weather_ != &::google::protobuf::internal::kEmptyString) {
    delete weather_;
  }
  if (weather) {
    set_has_weather();
    weather_ = weather;
  } else {
    clear_has_weather();
    weather_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// response_error

// optional int32 error_code = 1;
inline bool response_error::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void response_error::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void response_error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void response_error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 response_error::error_code() const {
  return error_code_;
}
inline void response_error::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional string error_string = 2;
inline bool response_error::has_error_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void response_error::set_has_error_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void response_error::clear_has_error_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void response_error::clear_error_string() {
  if (error_string_ != &::google::protobuf::internal::kEmptyString) {
    error_string_->clear();
  }
  clear_has_error_string();
}
inline const ::std::string& response_error::error_string() const {
  return *error_string_;
}
inline void response_error::set_error_string(const ::std::string& value) {
  set_has_error_string();
  if (error_string_ == &::google::protobuf::internal::kEmptyString) {
    error_string_ = new ::std::string;
  }
  error_string_->assign(value);
}
inline void response_error::set_error_string(const char* value) {
  set_has_error_string();
  if (error_string_ == &::google::protobuf::internal::kEmptyString) {
    error_string_ = new ::std::string;
  }
  error_string_->assign(value);
}
inline void response_error::set_error_string(const char* value, size_t size) {
  set_has_error_string();
  if (error_string_ == &::google::protobuf::internal::kEmptyString) {
    error_string_ = new ::std::string;
  }
  error_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* response_error::mutable_error_string() {
  set_has_error_string();
  if (error_string_ == &::google::protobuf::internal::kEmptyString) {
    error_string_ = new ::std::string;
  }
  return error_string_;
}
inline ::std::string* response_error::release_error_string() {
  clear_has_error_string();
  if (error_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_string_;
    error_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void response_error::set_allocated_error_string(::std::string* error_string) {
  if (error_string_ != &::google::protobuf::internal::kEmptyString) {
    delete error_string_;
  }
  if (error_string) {
    set_has_error_string();
    error_string_ = error_string;
  } else {
    clear_has_error_string();
    error_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmessage_2eproto__INCLUDED
