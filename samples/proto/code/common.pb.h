// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class echo_message;
class echo_messageDefaultTypeInternal;
extern echo_messageDefaultTypeInternal _echo_message_default_instance_;
class news;
class newsDefaultTypeInternal;
extern newsDefaultTypeInternal _news_default_instance_;

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_common_2eproto

// ===================================================================

class echo_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo_message) */ {
 public:
  echo_message();
  virtual ~echo_message();

  echo_message(const echo_message& from);

  inline echo_message& operator=(const echo_message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const echo_message& default_instance();

  static inline const echo_message* internal_default_instance() {
    return reinterpret_cast<const echo_message*>(
               &_echo_message_default_instance_);
  }

  void Swap(echo_message* other);

  // implements Message ----------------------------------------------

  inline echo_message* New() const PROTOBUF_FINAL { return New(NULL); }

  echo_message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const echo_message& from);
  void MergeFrom(const echo_message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(echo_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string echo_str = 1;
  void clear_echo_str();
  static const int kEchoStrFieldNumber = 1;
  const ::std::string& echo_str() const;
  void set_echo_str(const ::std::string& value);
  #if LANG_CXX11
  void set_echo_str(::std::string&& value);
  #endif
  void set_echo_str(const char* value);
  void set_echo_str(const char* value, size_t size);
  ::std::string* mutable_echo_str();
  ::std::string* release_echo_str();
  void set_allocated_echo_str(::std::string* echo_str);

  // int32 echo_num = 2;
  void clear_echo_num();
  static const int kEchoNumFieldNumber = 2;
  ::google::protobuf::int32 echo_num() const;
  void set_echo_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:echo_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr echo_str_;
  ::google::protobuf::int32 echo_num_;
  mutable int _cached_size_;
  friend struct  protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class news : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:news) */ {
 public:
  news();
  virtual ~news();

  news(const news& from);

  inline news& operator=(const news& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const news& default_instance();

  static inline const news* internal_default_instance() {
    return reinterpret_cast<const news*>(
               &_news_default_instance_);
  }

  void Swap(news* other);

  // implements Message ----------------------------------------------

  inline news* New() const PROTOBUF_FINAL { return New(NULL); }

  news* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const news& from);
  void MergeFrom(const news& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(news* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str = 1;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:news)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  mutable int _cached_size_;
  friend struct  protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// echo_message

// string echo_str = 1;
inline void echo_message::clear_echo_str() {
  echo_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& echo_message::echo_str() const {
  // @@protoc_insertion_point(field_get:echo_message.echo_str)
  return echo_str_.GetNoArena();
}
inline void echo_message::set_echo_str(const ::std::string& value) {
  
  echo_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo_message.echo_str)
}
#if LANG_CXX11
inline void echo_message::set_echo_str(::std::string&& value) {
  
  echo_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo_message.echo_str)
}
#endif
inline void echo_message::set_echo_str(const char* value) {
  
  echo_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo_message.echo_str)
}
inline void echo_message::set_echo_str(const char* value, size_t size) {
  
  echo_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo_message.echo_str)
}
inline ::std::string* echo_message::mutable_echo_str() {
  
  // @@protoc_insertion_point(field_mutable:echo_message.echo_str)
  return echo_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* echo_message::release_echo_str() {
  // @@protoc_insertion_point(field_release:echo_message.echo_str)
  
  return echo_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void echo_message::set_allocated_echo_str(::std::string* echo_str) {
  if (echo_str != NULL) {
    
  } else {
    
  }
  echo_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), echo_str);
  // @@protoc_insertion_point(field_set_allocated:echo_message.echo_str)
}

// int32 echo_num = 2;
inline void echo_message::clear_echo_num() {
  echo_num_ = 0;
}
inline ::google::protobuf::int32 echo_message::echo_num() const {
  // @@protoc_insertion_point(field_get:echo_message.echo_num)
  return echo_num_;
}
inline void echo_message::set_echo_num(::google::protobuf::int32 value) {
  
  echo_num_ = value;
  // @@protoc_insertion_point(field_set:echo_message.echo_num)
}

// -------------------------------------------------------------------

// news

// string str = 1;
inline void news::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& news::str() const {
  // @@protoc_insertion_point(field_get:news.str)
  return str_.GetNoArena();
}
inline void news::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:news.str)
}
#if LANG_CXX11
inline void news::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:news.str)
}
#endif
inline void news::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:news.str)
}
inline void news::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:news.str)
}
inline ::std::string* news::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:news.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* news::release_str() {
  // @@protoc_insertion_point(field_release:news.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void news::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:news.str)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
